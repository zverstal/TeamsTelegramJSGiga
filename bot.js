// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config();
const { Bot } = require('grammy');
const axios = require('axios');
const https = require('https');
const { ConfidentialClientApplication } = require('@azure/msal-node');
const cron = require('node-cron');
const fs = require('fs');
const path = require('path');
const sqlite3 = require('sqlite3').verbose(); // –î–ª—è —Ä–∞–±–æ—Ç—ã —Å SQLite

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
const bot = new Bot(process.env.BOT_API_KEY);

// MSAL-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const msalConfig = {
  auth: {
    clientId: process.env.AZURE_CLIENT_ID,
    authority: `https://login.microsoftonline.com/${process.env.AZURE_TENANT_ID}`,
    clientSecret: process.env.AZURE_CLIENT_SECRET,
  },
};

// *******************
// 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
// *******************
let db;
function initDatabase() {
  db = new sqlite3.Database(path.join(__dirname, 'summaries.db'), (err) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ë–î SQLite:', err);
    } else {
      console.log('SQLite –ë–∞–∑–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞.');
      db.run(`
        CREATE TABLE IF NOT EXISTS error_summaries (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          chat_id TEXT NOT NULL,
          message_id TEXT NOT NULL,
          summary_text TEXT NOT NULL,
          details_json TEXT NOT NULL,
          created_at TEXT NOT NULL
        )
      `, (err) => {
        if (err) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã:', err);
        } else {
          console.log('–¢–∞–±–ª–∏—Ü–∞ error_summaries –≥–æ—Ç–æ–≤–∞.');
        }
      });
    }
  });
}
initDatabase();

// *******************
// 2. –ü—Ä–æ—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
// *******************
let lastProcessedMessageId = null;
const collectedErrors = [];
const processedErrorSubjects = new Set();

const lastMessageIdFile = path.join(__dirname, 'lastMessageId.txt');
const processedSubjectsFile = path.join(__dirname, 'processedErrorSubjects.json');

async function saveLastProcessedMessageId(id) {
  try {
    await fs.promises.writeFile(lastMessageIdFile, id, 'utf8');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ lastMessageId.txt:', error);
  }
}

function loadLastProcessedMessageId() {
  try {
    if (fs.existsSync(lastMessageIdFile)) {
      const data = fs.readFileSync(lastMessageIdFile, 'utf8').trim();
      if (data) lastProcessedMessageId = data;
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ lastMessageId.txt:', error);
  }
}

function loadProcessedErrorSubjects() {
  try {
    if (fs.existsSync(processedSubjectsFile)) {
      const data = fs.readFileSync(processedSubjectsFile, 'utf8').trim();
      const subjects = JSON.parse(data);
      if (Array.isArray(subjects)) subjects.forEach((subject) => processedErrorSubjects.add(subject));
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ processedErrorSubjects.json:', error);
  }
}

async function saveProcessedErrorSubjects() {
  try {
    await fs.promises.writeFile(processedSubjectsFile, JSON.stringify([...processedErrorSubjects], null, 2), 'utf8');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ processedErrorSubjects.json:', error);
  }
}

async function resetProcessedErrorSubjects() {
  try {
    if (fs.existsSync(processedSubjectsFile)) await fs.promises.unlink(processedSubjectsFile);
    processedErrorSubjects.clear();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ processedErrorSubjects:', error);
  }
}

loadLastProcessedMessageId();
loadProcessedErrorSubjects();

// **************************
// 3. –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è Microsoft Graph
// **************************
async function getMicrosoftToken() {
  const cca = new ConfidentialClientApplication(msalConfig);
  const tokenRequest = { scopes: ['https://graph.microsoft.com/.default'] };
  try {
    const response = await cca.acquireTokenByClientCredential(tokenRequest);
    console.log('üîë Microsoft OAuth2 —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω.');
    return response.accessToken;
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ Microsoft:', err.message);
    return null;
  }
}

function extractTextContent(message) {
  const rawText = message.body?.content || '';
  // –£–±–∏—Ä–∞–µ–º HTML-—Ç–µ–≥–∏
  const text = rawText.replace(/<\/?[^>]+(>|$)/g, '').trim();

  let sender = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  let subject = '–ë–µ–∑ —Ç–µ–º—ã';
  let isReply = false;
  let body = '';

  const lines = text.split('\n').map((line) => line.trim());
  for (const line of lines) {
    if (line.startsWith('–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:')) {
      sender = line.replace(/^–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:\s*/i, '').trim();
    } else if (line.startsWith('–¢–µ–º–∞:')) {
      subject = line.replace(/^–¢–µ–º–∞:\s*/i, '').trim();
      if (/^RE:/i.test(subject)) {
        isReply = true;
        subject = subject.replace(/^RE:\s*/i, '').trim();
      }
    } else {
      body += (body ? '\n' : '') + line;
    }
  }

  const errorKeywords = /–æ—à–∏–±–∫–∞|–æ–ø–æ–≤–µ—â–µ–Ω–∏–µ|failed|error|–æ—à–∏–±–∫–∏|exception|critical/i;
  const isError = sender.toLowerCase() === 'noreply@winline.kz' &&
                  (errorKeywords.test(subject) || errorKeywords.test(body));

  return {
    id: message.id,
    sender,
    subject,
    body,
    isReply,
    isError,
    createdDateTime: message.createdDateTime,
  };
}

function getErrorTypeAndIdentifier(errorMsg) {
  const text = errorMsg.body.toLowerCase();
  if (errorMsg.subject.includes('STOPAZART')) {
    const match = text.match(/id –∏–≥—Ä–æ–∫–∞[:\s]*([0-9]+)/i);
    return { type: 'STOPAZART', id: match?.[1] || '–Ω–µ –Ω–∞–π–¥–µ–Ω' };
  } else if (errorMsg.subject.includes('SmartBridge')) {
    const match = text.match(/–Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\s*([0-9]+)/i);
    return { type: 'SmartBridge', id: match?.[1] || '–Ω–µ –Ω–∞–π–¥–µ–Ω' };
  } else if (errorMsg.subject.includes('—Ä–µ–µ—Å—Ç—Ä–µ –¥–æ–ª–∂–Ω–∏–∫–æ–≤')) {
    const match = text.match(/id –∏–≥—Ä–æ–∫–∞[:\s]*([0-9]+)/i);
    return { type: '–†–µ–µ—Å—Ç—Ä –¥–æ–ª–∂–Ω–∏–∫–æ–≤', id: match?.[1] || '–Ω–µ –Ω–∞–π–¥–µ–Ω' };
  } else {
    return { type: '–î—Ä—É–≥–æ–µ', id: 'N/A' };
  }
}

async function fetchTeamsMessages(token, teamId, channelId) {
  console.log('üì° –ß—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Teams...');
  const url = `https://graph.microsoft.com/v1.0/teams/${teamId}/channels/${channelId}/messages`;
  try {
    const response = await axios.get(url, { headers: { Authorization: `Bearer ${token}` } });
    const messages = response.data.value.map(extractTextContent);
    console.log(`üì• –ù–∞–π–¥–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π.`);
    return messages.sort((a, b) => new Date(a.createdDateTime) - new Date(b.createdDateTime));
  } catch (err) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Teams: ${err.message}`);
    return [];
  }
}

async function summarizeMessages(messages, lastMsgId) {
  console.log('üß† –ó–∞–ø—Ä–æ—Å –∫ OpenAI –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏...');
  try {
    const messageList = messages
      .map((msg) => {
        const replyIndicator = msg.isReply ? '\n–¢–∏–ø: –û—Ç–≤–µ—Ç (—Ç–µ–º–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)' : '';
        return `ID: ${msg.id}\n–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ${msg.sender}\n–¢–µ–º–∞: ${msg.subject}${replyIndicator}\n–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: ${msg.body}`;
      })
      .join('\n\n');

    const prompt = `
(–ü–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π ID: ${lastMsgId})

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Teams –∏ —Å–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ (–æ–¥–Ω–∏–º-–¥–≤—É–º—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏):
${messageList}
    `.trim();

    const requestData = {
      model: 'gpt-4o-mini',
      temperature: 0.0,
      max_tokens: 1000,
      messages: [{ role: 'user', content: prompt }],
    };

    const response = await axios.post('https://api.openai.com/v1/chat/completions', requestData, {
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
      },
      httpsAgent: new https.Agent({ rejectUnauthorized: false }),
    });

    const result = response.data.choices[0]?.message?.content || '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI.';
    console.log('‚úÖ –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
    return result;
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', err.message);
    return '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—é–º–µ —Å–æ–æ–±—â–µ–Ω–∏–π.';
  }
}

// ****************************************
// 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–¥–∫–∏ –æ–± –æ—à–∏–±–∫–∞—Ö
// ****************************************
async function sendErrorSummaryIfNeeded() {
  if (collectedErrors.length === 0) return;

  const errorCountBySubject = {};
  collectedErrors.forEach((error) => {
    if (errorCountBySubject[error.subject]) {
      errorCountBySubject[error.subject].count++;
      errorCountBySubject[error.subject].lastOccurred = error.createdDateTime;
    } else {
      errorCountBySubject[error.subject] = {
        count: 1,
        lastOccurred: error.createdDateTime,
        body: error.body,
      };
    }
  });

  let summary = 'üîç *–°–≤–æ–¥–∫–∞ –æ—à–∏–±–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å:*\n';
  for (const [subject, data] of Object.entries(errorCountBySubject)) {
    const lastDate = new Date(data.lastOccurred).toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' });
    summary += `üìå *–¢–µ–º–∞:* ${subject}\n- *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* ${data.count}\n- *–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ:* ${lastDate}\n`;
  }

  const errorDetails = collectedErrors.map((e) => ({
    type: e.type,
    id: e.extractedId,
    subject: e.subject,
    date: e.createdDateTime,
  }));

  collectedErrors.length = 0;

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å placeholder-–∫–Ω–æ–ø–∫–æ–π "–ü–æ–¥—Ä–æ–±–Ω–µ–µ"
  const message = await bot.api.sendMessage(process.env.TELEGRAM_CHAT_ID, summary, {
    parse_mode: 'Markdown',
    reply_markup: {
      inline_keyboard: [[{ text: 'üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ', callback_data: 'show_details_TEMP' }]],
    },
  });

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤–æ–¥–∫—É –≤ –ë–î, —á—Ç–æ–±—ã –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—ë
  const createdAt = new Date().toISOString();
  const insertSql = `
    INSERT INTO error_summaries (chat_id, message_id, summary_text, details_json, created_at)
    VALUES (?, ?, ?, ?, ?)
  `;
  db.run(
    insertSql,
    [
      String(message.chat.id),
      String(message.message_id),
      summary,
      JSON.stringify(errorDetails),
      createdAt,
    ],
    function (err) {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–≤–æ–¥–∫–∏ –≤ –ë–î:', err);
        return;
      }
      const summaryId = this.lastID;
      const newInlineKeyboard = {
        inline_keyboard: [
          [{ text: 'üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ', callback_data: `show_details_${summaryId}` }],
        ],
      };
      bot.api.editMessageReplyMarkup(message.chat.id, message.message_id, newInlineKeyboard)
        .catch((e) => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:', e));
    }
  );
}

// *********************************************************
// 5. –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Teams
// *********************************************************
async function processTeamsMessages() {
  console.log('üîÑ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π Teams...');
  const msToken = await getMicrosoftToken();
  if (!msToken) {
    console.error('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –ø–æ–ª—É—á–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.');
    return;
  }
  const messages = await fetchTeamsMessages(msToken, process.env.TEAM_ID, process.env.CHANNEL_ID);
  console.log(`üì¨ –ü–æ–ª—É—á–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π.`);
  if (messages.length === 0) return;

  const newMessages = messages.filter((msg) => !lastProcessedMessageId || msg.id > lastProcessedMessageId);
  if (newMessages.length === 0) {
    console.log('üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.');
    return;
  }
  lastProcessedMessageId = newMessages[newMessages.length - 1].id;
  await saveLastProcessedMessageId(lastProcessedMessageId);

  const errors = newMessages.filter((msg) => msg.isError);
  const normalMessages = newMessages.filter((msg) => !msg.isError);

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
  for (const errorMsg of errors) {
    const { type, id } = getErrorTypeAndIdentifier(errorMsg);
    errorMsg.type = type;
    errorMsg.extractedId = id;

    if (!processedErrorSubjects.has(errorMsg.subject)) {
      const msgText = `‚ùó *–ù–æ–≤–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞:*\nüìå *–¢–µ–º–∞:* ${errorMsg.subject}`;
      await bot.api.sendMessage(process.env.TELEGRAM_CHAT_ID, msgText, { parse_mode: 'Markdown' });
      processedErrorSubjects.add(errorMsg.subject);
      await saveProcessedErrorSubjects();
    } else {
      collectedErrors.push(errorMsg);
    }
  }

  // –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  if (normalMessages.length > 0) {
    const summary = await summarizeMessages(normalMessages, lastProcessedMessageId);
    if (summary) {
      await bot.api.sendMessage(
        process.env.TELEGRAM_CHAT_ID,
        `üìù *–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:*\n\n${summary}`,
        { parse_mode: 'Markdown' }
      );
    }
  }
}

// *********************************************************
// 6. –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query (–∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ" –∏ "–°–∫—Ä—ã—Ç—å")
// *********************************************************
bot.on('callback_query:data', async (ctx) => {
  const callbackData = ctx.callbackQuery.data;
  const match = callbackData.match(/^(show_details|hide_details)_(\d+)$/);
  if (!match) {
    await ctx.answerCallbackQuery({ text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞', show_alert: true });
    return;
  }
  const action = match[1];
  const summaryId = parseInt(match[2], 10);

  db.get('SELECT * FROM error_summaries WHERE id = ?', [summaryId], async (err, row) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–≤–æ–¥–∫–∏ –∏–∑ –ë–î:', err);
      await ctx.answerCallbackQuery({ text: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –¥–∞–Ω–Ω—ã–º.', show_alert: true });
      return;
    }
    if (!row) {
      await ctx.answerCallbackQuery({ text: '–°–≤–æ–¥–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.', show_alert: true });
      return;
    }
    if (action === 'show_details') {
      const detailsArray = JSON.parse(row.details_json);
      const grouped = detailsArray.reduce((acc, errItem) => {
        acc[errItem.type] = acc[errItem.type] || [];
        acc[errItem.type].push(errItem.id);
        return acc;
      }, {});
      let detailsText = 'üìã *–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫ –ø–æ —Ç–∏–ø–∞–º:*\n\n';
      for (const [type, ids] of Object.entries(grouped)) {
        const uniqueIds = [...new Set(ids)].sort();
        detailsText += `*${type}* (–∫–æ–ª-–≤–æ: ${uniqueIds.length})\nID:\`${uniqueIds.join(', ')}\`\n\n`;
      }
      await ctx.answerCallbackQuery();
      await bot.api.editMessageText(
        row.chat_id,
        row.message_id,
        detailsText,
        {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîº –°–∫—Ä—ã—Ç—å', callback_data: `hide_details_${summaryId}` }],
            ],
          },
        }
      );
    } else if (action === 'hide_details') {
      await ctx.answerCallbackQuery();
      await bot.api.editMessageText(
        row.chat_id,
        row.message_id,
        row.summary_text,
        {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ', callback_data: `show_details_${summaryId}` }],
            ],
          },
        }
      );
    }
  });
});

// *********************************************************
// 7. –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ (cron)
// *********************************************************
// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
cron.schedule('* * * * *', () => processTeamsMessages());
// –†–∞–∑ –≤ —á–∞—Å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –æ—à–∏–±–æ–∫ (–µ—Å–ª–∏ –Ω–∞–∫–æ–ø–∏–ª–æ—Å—å)
cron.schedule('0 * * * *', () => sendErrorSummaryIfNeeded());
// –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ç–µ–º—ã –≤ 00:05 –ø–æ –ú–æ—Å–∫–≤–µ
cron.schedule('5 0 * * *', () => resetProcessedErrorSubjects(), { timezone: 'Europe/Moscow' });
// –ß–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–µ —Å–≤–æ–¥–∫–∏ (—Å—Ç–∞—Ä—à–µ 3 –º–µ—Å—è—Ü–µ–≤) —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä –≤ 03:00 –ø–æ –ú–°–ö
cron.schedule('0 3 * * *', () => cleanOldSummaries(), { timezone: 'Europe/Moscow' });

function cleanOldSummaries() {
  const sql = `
    DELETE FROM error_summaries
    WHERE datetime(created_at) < datetime('now', '-3 months')
  `;
  db.run(sql, function (err) {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä—ã—Ö —Å–≤–æ–¥–æ–∫:', err);
    } else {
      console.log(`–°—Ç–∞—Ä—ã–µ —Å–≤–æ–¥–∫–∏ —É–¥–∞–ª–µ–Ω—ã. –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${this.changes}`);
    }
  });
}

// *********************************************************
// 8. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
// *********************************************************
bot.command('start', (ctx) => {
  ctx.reply('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π Teams –≤–∫–ª—é—á–µ–Ω–∞.');
});

bot.catch((err) => {
  console.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', err);
});

bot.start();