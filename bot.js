require('dotenv').config();
const { Bot, InlineKeyboard } = require('grammy');
const axios = require('axios');
const https = require('https');
const { ConfidentialClientApplication } = require('@azure/msal-node');
const cron = require('node-cron');
const fs = require('fs');
const path = require('path');
const sqlite3 = require('sqlite3').verbose();
const cheerio = require('cheerio'); // –î–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Bot(process.env.BOT_API_KEY);

// MSAL-–∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Teams
const msalConfig = {
  auth: {
    clientId: process.env.AZURE_CLIENT_ID,
    authority: `https://login.microsoftonline.com/${process.env.AZURE_TENANT_ID}`,
    clientSecret: process.env.AZURE_CLIENT_SECRET,
  },
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î SQLite
let db;
function initDatabase() {
  db = new sqlite3.Database(path.join(__dirname, 'summaries.db'), (err) => {
    if (err) return console.error('SQLite error:', err);
    // –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤–æ–¥–æ–∫
    db.run(`
      CREATE TABLE IF NOT EXISTS error_summaries (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        chat_id TEXT,
        message_id TEXT,
        summary_text TEXT,
        details_json TEXT,
        created_at TEXT
      )
    `);

    // –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π becloud
    db.run(`
      CREATE TABLE IF NOT EXISTS becloud_news (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        news_id TEXT UNIQUE, 
        title TEXT,
        date TEXT,
        url TEXT,
        content TEXT,
        created_at TEXT
      )
    `);
  });
}
initDatabase();

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Teams
let lastProcessedMessageId = null;
const lastMessageIdFile = path.join(__dirname, 'lastMessageId.txt');

// –°–±–æ—Ä—â–∏–∫ –æ—à–∏–±–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è
const collectedErrors = [];
// Set —Å —É–∂–µ —É–ø–æ–º—è–Ω—É—Ç—ã–º–∏ —Ç–µ–º–∞–º–∏ (—á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ)
const processedErrorSubjects = new Set();
const processedSubjectsFile = path.join(__dirname, 'processedErrorSubjects.json');

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
function loadLastProcessedMessageId() {
  try {
    if (fs.existsSync(lastMessageIdFile)) {
      lastProcessedMessageId = fs.readFileSync(lastMessageIdFile, 'utf8').trim();
    }
  } catch (e) {
    console.error(e);
  }
}

function loadProcessedErrorSubjects() {
  try {
    if (fs.existsSync(processedSubjectsFile)) {
      const arr = JSON.parse(fs.readFileSync(processedSubjectsFile, 'utf8'));
      arr.forEach((s) => processedErrorSubjects.add(s));
    }
  } catch (e) {
    console.error(e);
  }
}

loadLastProcessedMessageId();
loadProcessedErrorSubjects();

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ ID
async function saveLastProcessedMessageId(id) {
  await fs.promises.writeFile(lastMessageIdFile, id, 'utf8');
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç–µ–º
async function saveProcessedErrorSubjects() {
  await fs.promises.writeFile(
    processedSubjectsFile,
    JSON.stringify([...processedErrorSubjects], null, 2),
    'utf8'
  );
}

// –°–±—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏)
async function resetProcessedErrorSubjects() {
  processedErrorSubjects.clear();
  if (fs.existsSync(processedSubjectsFile)) fs.unlinkSync(processedSubjectsFile);
}

// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω Microsoft (–¥–ª—è Teams)
async function getMicrosoftToken() {
  const cca = new ConfidentialClientApplication(msalConfig);
  const tokenRequest = { scopes: ['https://graph.microsoft.com/.default'] };
  try {
    const result = await cca.acquireTokenByClientCredential(tokenRequest);
    return result.accessToken;
  } catch (e) {
    console.error('MS token error:', e);
    return null;
  }
}

// –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —Ç–µ–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
function extractTextContent(message) {
  const raw = message.body?.content || '';
  const text = raw.replace(/<[^>]+>/g, '').trim();
  let sender = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  let subject = '–ë–µ–∑ —Ç–µ–º—ã';
  let isReply = false;
  let body = '';

  text.split('\n').forEach((line) => {
    line = line.trim();
    if (line.startsWith('–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:')) {
      sender = line.replace('–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:', '').trim();
    } else if (line.startsWith('–¢–µ–º–∞:')) {
      subject = line.replace('–¢–µ–º–∞:', '').trim();
      if (/^RE:/i.test(subject)) {
        isReply = true;
        subject = subject.replace(/^RE:/i, '').trim();
      }
    } else {
      body += (body ? '\n' : '') + line;
    }
  });

  const isError = (
    sender.toLowerCase() === 'noreply@winline.kz'
    && /(–æ—à–∏–±–∫–∞|–æ–ø–æ–≤–µ—â–µ–Ω–∏–µ|–æ—à–∏–±–∫–∏|–æ—à–∏–±–æ—á–∫–∞|error|fail|exception|critical)/i.test(subject + ' ' + body)
  );
  return {
    id: message.id,
    sender,
    subject,
    body,
    isReply,
    isError,
    createdDateTime: message.createdDateTime,
  };
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ —Ç–µ–º–µ
function getErrorTypeAndIdentifier(msg) {
  const txt = msg.body.toLowerCase();
  if (msg.subject.includes('STOPAZART')) {
    return {
      type: 'STOPAZART',
      id: txt.match(/id –∏–≥—Ä–æ–∫–∞[:\s]*([0-9]+)/i)?.[1] || '–Ω–µ –Ω–∞–π–¥–µ–Ω',
    };
  }
  if (msg.subject.includes('SmartBridge')) {
    return {
      type: 'SmartBridge',
      id: txt.match(/–Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\s*([0-9]+)/i)?.[1] || '–Ω–µ –Ω–∞–π–¥–µ–Ω',
    };
  }
  if (msg.subject.includes('—Ä–µ–µ—Å—Ç—Ä–µ –¥–æ–ª–∂–Ω–∏–∫–æ–≤')) {
    return {
      type: '–†–µ–µ—Å—Ç—Ä –¥–æ–ª–∂–Ω–∏–∫–æ–≤',
      id: txt.match(/id –∏–≥—Ä–æ–∫–∞[:\s]*([0-9]+)/i)?.[1] || '–Ω–µ –Ω–∞–π–¥–µ–Ω',
    };
  }
  return { type: '–î—Ä—É–≥–æ–µ', id: 'N/A' };
}

// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π Teams
async function fetchTeamsMessages(token, teamId, channelId) {
  try {
    const url = `https://graph.microsoft.com/v1.0/teams/${teamId}/channels/${channelId}/messages`;
    const res = await axios.get(url, {
      headers: { Authorization: `Bearer ${token}` },
    });
    return res.data.value.map(extractTextContent);
  } catch (e) {
    console.error('Fetch Teams error:', e);
    return [];
  }
}

// GPT-—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –æ–±—ã—á–Ω—ã—Ö (–Ω–µ-–æ—à–∏–±–æ—á–Ω—ã—Ö) —Å–æ–æ–±—â–µ–Ω–∏–π
async function summarizeMessages(messages, lastMsgId) {
  if (!messages.length) return null;

  const list = messages.map((msg) => {
    const reply = msg.isReply
      ? '\n–¢–∏–ø: –û—Ç–≤–µ—Ç (—Ç–µ–º–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)'
      : '';
    return `ID: ${msg.id}\n–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ${msg.sender}\n–¢–µ–º–∞: ${msg.subject}${reply}\n–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: ${msg.body}`;
  }).join('\n\n');

  // –ü—Ä–∏–º–µ—Ä prompt–∞. –ü–æ–¥—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥ —Å–µ–±—è –∏ –º–æ–¥–µ–ª—å
  const prompt = `
(–ü–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π ID: ${lastMsgId})

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Teams. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ:

${list}
`.trim();

  // –ó–¥–µ—Å—å –≤ –ø—Ä–∏–º–µ—Ä–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è OpenAI (gpt-4o-mini). –£ –≤–∞—Å –º–æ–∂–µ—Ç –±—ã—Ç—å –¥—Ä—É–≥–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç/–º–æ–¥–µ–ª—å
  try {
    const response = await axios.post('https://api.openai.com/v1/chat/completions', {
      model: 'gpt-4o-mini',
      messages: [{ role: 'user', content: prompt }],
      temperature: 0,
      max_tokens: 1000,
    }, {
      headers: {
        Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
      },
      httpsAgent: new https.Agent({ rejectUnauthorized: false }),
    });

    return response.data.choices[0]?.message?.content || '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI.';
  } catch (err) {
    console.error('OpenAI summarization error:', err);
    return null;
  }
}

/* --------------------------------------
   –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –æ—à–∏–±–æ–∫
-----------------------------------------*/

// –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞–∑ –≤ —á–∞—Å —Å–≤–æ–¥–∫—É —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –æ—à–∏–±–æ–∫
async function sendErrorSummaryIfNeeded() {
  if (collectedErrors.length === 0) return;

  const grouped = {};
  collectedErrors.forEach((err) => {
    if (!grouped[err.subject]) {
      grouped[err.subject] = {
        count: 0,
        lastOccurred: err.createdDateTime,
        body: err.body,
      };
    }
    grouped[err.subject].count++;
    grouped[err.subject].lastOccurred = err.createdDateTime;
  });

  let summary = 'üîç *–°–≤–æ–¥–∫–∞ –æ—à–∏–±–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å:*\n';
  for (const [subject, data] of Object.entries(grouped)) {
    const lastDate = new Date(data.lastOccurred).toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' });
    summary += `üìå *–¢–µ–º–∞:* ${subject}\n- *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* ${data.count}\n- *–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ:* ${lastDate}\n`;
  }

  const details = collectedErrors.map(e => ({
    type: e.type,
    id: e.extractedId,
    subject: e.subject,
    date: e.createdDateTime,
  }));
  collectedErrors.length = 0; // –æ—á–∏—â–∞–µ–º

  const msg = await bot.api.sendMessage(process.env.TELEGRAM_CHAT_ID, summary, {
    parse_mode: 'Markdown',
    reply_markup: new InlineKeyboard().text('üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ', 'show_details_TEMP'),
  });

  const createdAt = new Date().toISOString();
  db.run(`
    INSERT INTO error_summaries (chat_id, message_id, summary_text, details_json, created_at)
    VALUES (?, ?, ?, ?, ?)
  `,
  [
    String(msg.chat.id),
    String(msg.message_id),
    summary,
    JSON.stringify(details),
    createdAt,
  ],
  function (err) {
    if (err) return console.error('DB insert error:', err);
    const summaryId = this.lastID;
    const keyboard = new InlineKeyboard().text('üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ', `show_details_${summaryId}`);
    bot.api.editMessageReplyMarkup(msg.chat.id, msg.message_id, { reply_markup: keyboard })
      .catch(e => console.error('Edit markup error:', e));
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Teams
async function processTeamsMessages() {
  const token = await getMicrosoftToken();
  if (!token) return;

  const messages = await fetchTeamsMessages(token, process.env.TEAM_ID, process.env.CHANNEL_ID);
  if (messages.length === 0) return;

  // –ë–µ—Ä—ë–º —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –∏–¥—É—Ç –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ
  const newMessages = messages.filter(m => !lastProcessedMessageId || m.id > lastProcessedMessageId);
  if (newMessages.length === 0) return;

  // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π ID
  lastProcessedMessageId = newMessages[newMessages.length - 1].id;
  await saveLastProcessedMessageId(lastProcessedMessageId);

  // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ –∏ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ
  const errors = newMessages.filter(m => m.isError);
  const normal = newMessages.filter(m => !m.isError);

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
  for (const msg of errors) {
    const { type, id } = getErrorTypeAndIdentifier(msg);
    msg.type = type;
    msg.extractedId = id;

    // –ï—Å–ª–∏ —Ç–µ–º–∞ –æ—à–∏–±–∫–∏ –µ—â—ë –Ω–µ –≤—Å—Ç—Ä–µ—á–∞–ª–∞—Å—å, —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–∏–º –≤ —á–∞—Ç
    if (!processedErrorSubjects.has(msg.subject)) {
      await bot.api.sendMessage(
        process.env.TELEGRAM_CHAT_ID,
        `‚ùó *–ù–æ–≤–∞—è –æ—à–∏–±–∫–∞:*\nüìå *–¢–µ–º–∞:* ${msg.subject}`,
        { parse_mode: 'Markdown' }
      );
      processedErrorSubjects.add(msg.subject);
      await saveProcessedErrorSubjects();
    } else {
      // –ò–Ω–∞—á–µ —Å–∫–ª–∞–¥–∏—Ä—É–µ–º, –æ—Ç–ø—Ä–∞–≤–∏–º —Å–≤–æ–¥–∫—É —Ä–∞–∑ –≤ —á–∞—Å
      collectedErrors.push(msg);
    }
  }

  // –°—É–º–º–∞—Ä–∏–∑–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  if (normal.length > 0) {
    const summary = await summarizeMessages(normal, lastProcessedMessageId);
    if (summary) {
      await bot.api.sendMessage(
        process.env.TELEGRAM_CHAT_ID,
        `üìù *–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:*\n\n${summary}`,
        { parse_mode: 'Markdown' }
      );
    }
  }
}

/* ----------------------------------------------------------------
   –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ —Å–≤–æ–¥–∫–∞–º–∏ –æ—à–∏–±–æ–∫ (–ø–æ–¥—Ä–æ–±–Ω–µ–µ/—Å–∫—Ä—ã—Ç—å)
-------------------------------------------------------------------*/
bot.on('callback_query:data', async (ctx) => {
  const data = ctx.callbackQuery.data;
  const match = data.match(/^(show_details|hide_details)_(\d+)$/);
  if (!match) {
    return ctx.answerCallbackQuery({ text: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.', show_alert: true });
  }

  const [_, action, id] = match;
  db.get('SELECT * FROM error_summaries WHERE id = ?', [id], async (err, row) => {
    if (err || !row) {
      return ctx.answerCallbackQuery({ text: '–°–≤–æ–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.', show_alert: true });
    }

    if (action === 'show_details') {
      const grouped = JSON.parse(row.details_json).reduce((acc, item) => {
        acc[item.type] = acc[item.type] || [];
        acc[item.type].push(item.id);
        return acc;
      }, {});

      let text = 'üìã *–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫ –ø–æ —Ç–∏–ø–∞–º:*\n\n';
      for (const [type, ids] of Object.entries(grouped)) {
        const unique = [...new Set(ids)].sort();
        text += `*${type}* (${unique.length}):\n\`${unique.join(', ')}\`\n\n`;
      }
      await ctx.answerCallbackQuery();
      await bot.api.editMessageText(row.chat_id, row.message_id, text, {
        parse_mode: 'Markdown',
        reply_markup: new InlineKeyboard().text('üîº –°–∫—Ä—ã—Ç—å', `hide_details_${id}`),
      });
    } else {
      await ctx.answerCallbackQuery();
      await bot.api.editMessageText(row.chat_id, row.message_id, row.summary_text, {
        parse_mode: 'Markdown',
        reply_markup: new InlineKeyboard().text('üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ', `show_details_${id}`),
      });
    }
  });
});

// –ü–æ—á–∏–Ω–∫–∞ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ" –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async function repairMissingButtons() {
  db.all('SELECT id, chat_id, message_id FROM error_summaries', async (err, rows) => {
    if (err) return console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–≤–æ–¥–æ–∫ –∏–∑ –ë–î:', err);
    for (const row of rows) {
      try {
        await bot.api.editMessageReplyMarkup(row.chat_id, row.message_id, {
          reply_markup: new InlineKeyboard().text('üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ', `show_details_${row.id}`),
        });
        console.log(`üîß –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ message_id=${row.message_id}`);
      } catch (e) {
        console.warn(`‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å message_id=${row.message_id}:`, e.description);
      }
    }
  });
}

bot.command('fixbuttons', async (ctx) => {
  await ctx.reply('üîß –ù–∞—á–∏–Ω–∞—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫...');
  await repairMissingButtons();
  await ctx.reply('‚úÖ –ü–æ–ø—Ä–æ–±–æ–≤–∞–ª –æ–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–≤–æ–¥–∫–∏.');
});

/* ------------------------------------------
   1) –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π becloud
-------------------------------------------*/

// –ü–∞—Ä—Å–∏–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É "https://becloud.by/customers/informing/"
async function fetchBecloudNewsList() {
  const baseURL = 'https://becloud.by';
  const newsURL = `${baseURL}/customers/informing/`;

  const { data } = await axios.get(newsURL, {
    httpsAgent: new https.Agent({ rejectUnauthorized: false }),
  });
  const $ = cheerio.load(data);
  
  const newsItems = [];

  // –ü—Ä–∏–º–µ—Ä–Ω–æ –∏—â–µ–º –±–ª–æ–∫–∏ —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏
  $('.news__item').each((_, el) => {
    const $item = $(el);
    const $titleTag = $item.find('h6 a');
    const title = $titleTag.text().trim();
    const href = $titleTag.attr('href');
    const date = $item.find('.news-date').text().trim();

    // –°–∫–æ–Ω—Å—Ç—Ä—É–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π url –Ω–æ–≤–æ—Å—Ç–∏
    const url = href.startsWith('http') ? href : `${baseURL}${href}`;

    // –î–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –º–æ–∂–Ω–æ –≤–∑—è—Ç—å —á–∞—Å—Ç—å URL –∏–ª–∏ id –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–∞
    const idAttr = $item.attr('id') || '';
    // –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º href –∫–∞–∫ news_id
    const news_id = href;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    if (title && date && href) {
      newsItems.push({ news_id, title, date, url });
    }
  });

  return newsItems;
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏
async function fetchBecloudNewsContent(url) {
  const { data } = await axios.get(url, {
    httpsAgent: new https.Agent({ rejectUnauthorized: false }),
  });
  const $ = cheerio.load(data);
  // –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –≤ div.cnt
  const content = $('.cnt').text().trim();
  return content;
}

// –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—ë—Ä—Ç–∫–∞: –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π, –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ
async function processBecloudNews() {
  try {
    const list = await fetchBecloudNewsList();

    for (const item of list) {
      // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤ –±–∞–∑–µ
      const isExists = await new Promise((resolve) => {
        db.get(
          'SELECT id FROM becloud_news WHERE news_id = ?',
          [item.news_id],
          (err, row) => {
            if (err) {
              console.error('DB check error:', err);
              return resolve(true); // –ß—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
            }
            resolve(!!row);
          }
        );
      });
      if (isExists) continue; // –£–∂–µ –µ—Å—Ç—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–æ–≤–æ—Å—Ç–∏
      const content = await fetchBecloudNewsContent(item.url);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
      const createdAt = new Date().toISOString();
      await new Promise((resolve) => {
        db.run(
          `INSERT INTO becloud_news (news_id, title, date, url, content, created_at)
           VALUES (?, ?, ?, ?, ?, ?)`,
          [item.news_id, item.title, item.date, item.url, content, createdAt],
          function (err) {
            if (err) {
              console.error('DB insert news error:', err);
            }
            resolve();
          }
        );
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
      // –ù–µ–º–Ω–æ–≥–æ —Å–æ–∫—Ä–∞—Ç–∏–º —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
      const shortContent = content.length > 1000
        ? (content.slice(0, 1000) + '...')
        : content;

      const msgText =
        `üì∞ *–ù–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å –æ—Ç beCloud!* \n\n` +
        `*–ó–∞–≥–æ–ª–æ–≤–æ–∫:* ${item.title}\n` +
        `*–î–∞—Ç–∞:* ${item.date}\n\n` +
        `_${shortContent}_\n\n` +
        `[–ü–æ–¥—Ä–æ–±–Ω–µ–µ](${item.url})`;

      await bot.api.sendMessage(process.env.TELEGRAM_CHAT_ID, msgText, {
        parse_mode: 'Markdown',
        disable_web_page_preview: false,
      });
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π becloud:', err);
  }
}

/* ---------------------------------------------------------
   2) –ö–æ–º–∞–Ω–¥–∞ /news ‚Äì –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –Ω–æ–≤–æ—Å—Ç–µ–π
----------------------------------------------------------*/
bot.command('news', async (ctx) => {
  // –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3-5 –Ω–æ–≤–æ—Å—Ç–µ–π
  const limit = 3;
  db.all(
    `SELECT * FROM becloud_news ORDER BY id DESC LIMIT ?`,
    [limit],
    (err, rows) => {
      if (err) {
        console.error('DB select news error:', err);
        return ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π.');
      }
      if (!rows || rows.length === 0) {
        return ctx.reply('–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.');
      }

      let response = 'üì∞ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ beCloud:*\n\n';
      rows.forEach((row) => {
        response += `*${row.title}* (${row.date})\n[–ü–æ–¥—Ä–æ–±–Ω–µ–µ](${row.url})\n\n`;
      });
      ctx.reply(response, { parse_mode: 'Markdown', disable_web_page_preview: false });
    }
  );
});

/* --------------------------------
   –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ cron-–∑–∞–¥–∞—á
-----------------------------------*/

// –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è Teams
cron.schedule('* * * * *', () => processTeamsMessages());

// –ö–∞–∂–¥—ã–π —á–∞—Å (–º–∏–Ω:00) ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –æ—à–∏–±–æ–∫ (–µ—Å–ª–∏ –Ω–∞–∫–æ–ø–∏–ª–∏—Å—å)
cron.schedule('0 * * * *', () => sendErrorSummaryIfNeeded());

// –°–±—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç–µ–º –æ—à–∏–±–æ–∫ –≤ 00:05
cron.schedule('5 0 * * *', () => resetProcessedErrorSubjects());

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–≤–æ–¥–æ–∫ –æ—à–∏–±–æ–∫ –≤ 03:00 (—Å—Ç–∞—Ä—à–µ 3 –º–µ—Å—è—Ü–µ–≤)
cron.schedule('0 3 * * *', () => {
  db.run(
    `DELETE FROM error_summaries
     WHERE datetime(created_at) < datetime('now', '-3 months')`,
    function (err) {
      if (err) console.error('–û—á–∏—Å—Ç–∫–∞ —Å–≤–æ–¥–æ–∫:', err);
      else console.log(`–£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö —Å–≤–æ–¥–æ–∫: ${this.changes}`);
    }
  );
});

// –ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ becloud
cron.schedule('*/30 * * * *', () => processBecloudNews());

// –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
bot.command('start', (ctx) => ctx.reply('‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω. –ñ–¥—ë—Ç –æ—à–∏–±–∫–∏ –≤ Teams –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ beCloud.'));

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
bot.catch((err) => console.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', err));

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.start();
