// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config();
const { Bot } = require('grammy');
const axios = require('axios');
const https = require('https');
const { ConfidentialClientApplication } = require('@azure/msal-node');
const cron = require('node-cron');
const fs = require('fs');
const path = require('path');

const bot = new Bot(process.env.BOT_API_KEY);

const msalConfig = {
    auth: {
        clientId: process.env.AZURE_CLIENT_ID,
        authority: `https://login.microsoftonline.com/${process.env.AZURE_TENANT_ID}`,
        clientSecret: process.env.AZURE_CLIENT_SECRET,
    },
};

let lastProcessedMessageId = null;
let lastSummaryMessage = null;
let lastSummaryText = '';
let lastErrorSummaryDetails = null;

const collectedErrors = [];
const processedErrorSubjects = new Set();

const lastMessageIdFile = path.join(__dirname, 'lastMessageId.txt');
const processedSubjectsFile = path.join(__dirname, 'processedErrorSubjects.json');

async function saveLastProcessedMessageId(id) {
    try {
        await fs.promises.writeFile(lastMessageIdFile, id, 'utf8');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ lastMessageId.txt:', error);
    }
}

function loadLastProcessedMessageId() {
    try {
        if (fs.existsSync(lastMessageIdFile)) {
            const data = fs.readFileSync(lastMessageIdFile, 'utf8').trim();
            if (data) lastProcessedMessageId = data;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ lastMessageId.txt:', error);
    }
}

function loadProcessedErrorSubjects() {
    try {
        if (fs.existsSync(processedSubjectsFile)) {
            const data = fs.readFileSync(processedSubjectsFile, 'utf8').trim();
            const subjects = JSON.parse(data);
            if (Array.isArray(subjects)) {
                subjects.forEach(subject => processedErrorSubjects.add(subject));
            }
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ processedErrorSubjects.json:', error);
    }
}

async function saveProcessedErrorSubjects() {
    try {
        await fs.promises.writeFile(processedSubjectsFile, JSON.stringify([...processedErrorSubjects], null, 2), 'utf8');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ processedErrorSubjects.json:', error);
    }
}

async function resetProcessedErrorSubjects() {
    try {
        if (fs.existsSync(processedSubjectsFile)) {
            await fs.promises.unlink(processedSubjectsFile);
        }
        processedErrorSubjects.clear();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ processedErrorSubjects:', error);
    }
}

loadLastProcessedMessageId();
loadProcessedErrorSubjects();

async function getMicrosoftToken() {
    const cca = new ConfidentialClientApplication(msalConfig);
    const tokenRequest = { scopes: ['https://graph.microsoft.com/.default'] };
    try {
        const response = await cca.acquireTokenByClientCredential(tokenRequest);
        console.log('üîë Microsoft OAuth2 —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω.');
        return response.accessToken;
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ Microsoft:', err.message);
        return null;
    }
};
    try {
        const response = await cca.acquireTokenByClientCredential(tokenRequest);
        console.log('üîë Microsoft OAuth2 —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω.');
        return response.accessToken;
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ Microsoft:', err.message);
        return null;
    }
};
    try {
        const response = await cca.acquireTokenByClientCredential(tokenRequest);
        return response.accessToken;
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ Microsoft:', err.message);
        return null;
    }
}

function extractTextContent(message) {
    const rawText = message.body?.content || '';
    const text = rawText.replace(/<\/?[^>]+(>|$)/g, '').trim();
    let sender = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    let subject = '–ë–µ–∑ —Ç–µ–º—ã';
    let isReply = false;
    const lines = text.split('\n').map(line => line.trim());
    let body = '';

    for (const line of lines) {
        if (line.startsWith('–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:')) sender = line.replace(/^–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:\s*/i, '').trim();
        else if (line.startsWith('–¢–µ–º–∞:')) {
            subject = line.replace(/^–¢–µ–º–∞:\s*/i, '').trim();
            if (/^RE:/i.test(subject)) {
                isReply = true;
                subject = subject.replace(/^RE:\s*/i, '').trim();
            }
        } else body += (body ? '\n' : '') + line;
    }

    const errorKeywords = /–æ—à–∏–±–∫–∞|–æ–ø–æ–≤–µ—â–µ–Ω–∏–µ|failed|error|–æ—à–∏–±–∫–∏|exception|critical/i;
    const isError = sender.toLowerCase() === 'noreply@winline.kz' && (errorKeywords.test(subject) || errorKeywords.test(body));

    return {
        id: message.id,
        sender,
        subject,
        body,
        isReply,
        isError,
        createdDateTime: message.createdDateTime,
    };
}

function getErrorTypeAndIdentifier(errorMsg) {
    const text = errorMsg.body.toLowerCase();
    if (errorMsg.subject.includes('STOPAZART')) {
        const match = text.match(/id –∏–≥—Ä–æ–∫–∞[:\s]*([0-9]+)/i);
        return { type: 'STOPAZART', id: match?.[1] || '–Ω–µ –Ω–∞–π–¥–µ–Ω' };
    } else if (errorMsg.subject.includes('SmartBridge')) {
        const match = text.match(/–Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\s*([0-9]+)/i);
        return { type: 'SmartBridge', id: match?.[1] || '–Ω–µ –Ω–∞–π–¥–µ–Ω' };
    } else if (errorMsg.subject.includes('—Ä–µ–µ—Å—Ç—Ä–µ –¥–æ–ª–∂–Ω–∏–∫–æ–≤')) {
        const match = text.match(/id –∏–≥—Ä–æ–∫–∞[:\s]*([0-9]+)/i);
        return { type: '–†–µ–µ—Å—Ç—Ä –¥–æ–ª–∂–Ω–∏–∫–æ–≤', id: match?.[1] || '–Ω–µ –Ω–∞–π–¥–µ–Ω' };
    }
    return { type: '–î—Ä—É–≥–æ–µ', id: 'N/A' };
}

async function fetchTeamsMessages(token, teamId, channelId) {
    console.log('üì° –ß—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Teams...');teamId}/channels/${channelId}/messages`;
    try {
        const response = await axios.get(url, {
            headers: { Authorization: `Bearer ${token}` },
        });
        const messages = response.data.value.map(extractTextContent);
        console.log(`üì• –ù–∞–π–¥–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π.`);
        return messages.sort((a, b) => new Date(a.createdDateTime) - new Date(b.createdDateTime));
    } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Teams: ${err.message}`);
        return [];
    }
}

async function summarizeMessages(messages, lastMsgId) {
    console.log('üß† –ó–∞–ø—Ä–æ—Å –∫ OpenAI –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏...');msg.id}\n–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ${msg.sender}\n–¢–µ–º–∞: ${msg.subject}${replyIndicator}\n–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: ${msg.body}`;
        }).join('\n\n');

        const prompt = `
(–ü–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π ID: ${lastMsgId})

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Teams. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É ID, —Å–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–æ–µ, —Ç–æ—á–Ω–æ–µ –∏ –ø–æ–Ω—è—Ç–Ω–æ–µ —Ä–µ–∑—é–º–µ, —Å—Ç—Ä–æ–≥–æ –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ. –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º (–¢–∏–ø: –û—Ç–≤–µ—Ç), –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏, —á—Ç–æ –æ–Ω–æ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º –∏ —á—Ç–æ —Ç–µ–º–∞ –±–µ—Ä—ë—Ç—Å—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.

–ü—Ä–∞–≤–∏–ª–∞:
1. ID —Å–æ–æ–±—â–µ–Ω–∏—è: –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä.
2. –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: —É–∫–∞–∂–∏ email –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è; –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ, –¥–æ–±–∞–≤—å –§–ò–û, –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ (–Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–¥–ø–∏—Å–∏ –∏–ª–∏ –¥–æ–º–µ–Ω–∞ –ø–æ—á—Ç—ã).
3. –¢–µ–º–∞: –µ—Å–ª–∏ —Ç–µ–º–∞ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–∞ –∏–ª–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, —É–∫–∞–∂–∏ –µ—ë. –î–ª—è –æ—Ç–≤–µ—Ç–æ–≤ —É–∫–∞–∂–∏, —á—Ç–æ —Ç–µ–º–∞ –±–µ—Ä—ë—Ç—Å—è –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
4. –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: —Å–æ—Å—Ç–∞–≤—å –æ–¥–Ω–æ-–¥–≤–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Ç–æ—á–Ω–æ –ø–µ—Ä–µ–¥–∞—é—â–∏—Ö —Å—É—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è—è –≤—Å–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏ –∏ –≤–æ–ø—Ä–æ—Å—ã. –ù–µ –ø–µ—Ä–µ—Å–∫–∞–∑—ã–≤–∞–π —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å–∏–ª—å–Ω–æ.
5. –ò–≥–Ω–æ—Ä–∏—Ä—É–π —ç–ª–µ–º–µ–Ω—Ç—ã, –Ω–µ –≤–ª–∏—è—é—â–∏–µ –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å—É—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∏, —Å—Å—ã–ª–∫–∏ –∏ –Ω–µ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Ñ—Ä–∞–∑—ã).

–°–æ—Å—Ç–∞–≤—å —Ä–µ–∑—é–º–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:

${messageList}
        `.trim();

        const requestData = {
            model: 'gpt-4o-mini',
            temperature: 0.0,
            max_tokens: 1000,
            messages: [{ role: 'user', content: prompt }],
        };

        const response = await axios.post('https://api.openai.com/v1/chat/completions', requestData, {
            headers: {
                'Content-Type': 'application/json',
                Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
            },
            httpsAgent: new https.Agent({ rejectUnauthorized: false }),
        });

        const result = response.data.choices[0]?.message?.content || '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI.';
        console.log('‚úÖ –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
        return result;
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', err.message);
        return '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—é–º–µ —Å–æ–æ–±—â–µ–Ω–∏–π.';
    }
}

async function sendErrorSummaryIfNeeded() {
    if (collectedErrors.length === 0) return;

    const errorCountBySubject = {};
    collectedErrors.forEach(error => {
        if (errorCountBySubject[error.subject]) {
            errorCountBySubject[error.subject].count++;
            errorCountBySubject[error.subject].lastOccurred = error.createdDateTime;
        } else {
            errorCountBySubject[error.subject] = {
                count: 1,
                lastOccurred: error.createdDateTime,
                body: error.body,
            };
        }
    });

    let summary = 'üîç *–°–≤–æ–¥–∫–∞ –æ—à–∏–±–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å:*
';
    for (const [subject, data] of Object.entries(errorCountBySubject)) {
        const lastDate = new Date(data.lastOccurred).toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' });
        summary += `üìå *–¢–µ–º–∞:* ${subject}
- *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* ${data.count}
- *–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ:* ${lastDate}
`;
    }

    lastErrorSummaryDetails = collectedErrors.map(e => ({ type: e.type, id: e.extractedId }));
    lastSummaryText = summary;

    const message = await bot.api.sendMessage(process.env.TELEGRAM_CHAT_ID, summary, {
        parse_mode: 'Markdown',
        reply_markup: {
            inline_keyboard: [[{ text: 'üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ', callback_data: 'show_details' }]],
        },
    });

    lastSummaryMessage = {
        message_id: message.message_id,
        chat_id: message.chat.id,
    };

    collectedErrors.length = 0;
}

async function processTeamsMessages() {
    console.log('üîÑ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π Teams...');
    const msToken = await getMicrosoftToken();
    if (!msToken) return;

    const messages = await fetchTeamsMessages(msToken, process.env.TEAM_ID, process.env.CHANNEL_ID);
    console.log(`üì¨ –ü–æ–ª—É—á–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π.`);
    if (messages.length === 0) return;

    const newMessages = messages.filter(msg => !lastProcessedMessageId || msg.id > lastProcessedMessageId);
    if (newMessages.length === 0) return;

    lastProcessedMessageId = newMessages[newMessages.length - 1].id;
    await saveLastProcessedMessageId(lastProcessedMessageId);

    const errors = newMessages.filter(msg => msg.isError);
    const normalMessages = newMessages.filter(msg => !msg.isError);

    for (const errorMsg of errors) {
        const { type, id } = getErrorTypeAndIdentifier(errorMsg);
        errorMsg.type = type;
        errorMsg.extractedId = id;

        if (!processedErrorSubjects.has(errorMsg.subject)) {
            const msgText = `‚ùó *–ù–æ–≤–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞:*
üìå *–¢–µ–º–∞:* ${errorMsg.subject}`;
            await bot.api.sendMessage(process.env.TELEGRAM_CHAT_ID, msgText, { parse_mode: 'Markdown' });
            processedErrorSubjects.add(errorMsg.subject);
            await saveProcessedErrorSubjects();
        } else {
            collectedErrors.push(errorMsg);
        }
    }

    if (normalMessages.length > 0) {
        const summary = await summarizeMessages(normalMessages, lastProcessedMessageId);
        if (summary) {
            await bot.api.sendMessage(process.env.TELEGRAM_CHAT_ID, `üìù *–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:*

${summary}`, { parse_mode: 'Markdown' });
        }
    }
}

bot.on('callback_query:data', async (ctx) => {
    const action = ctx.callbackQuery.data;
    if (!lastSummaryMessage) return;

    if (action === 'show_details') {
        if (!lastErrorSummaryDetails?.length) {
            await ctx.answerCallbackQuery({ text: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.', show_alert: true });
            return;
        }

        const grouped = lastErrorSummaryDetails.reduce((acc, err) => {
            acc[err.type] = acc[err.type] || [];
            acc[err.type].push(err.id);
            return acc;
        }, {});

        let details = 'üìã *–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫ –ø–æ —Ç–∏–ø–∞–º:*
';
        for (const [type, ids] of Object.entries(grouped)) {
            const uniqueIds = [...new Set(ids)].sort();
            details += `*${type}* (${uniqueIds.length}):
\`${uniqueIds.join(', ')}\`
`;
        }

        await ctx.answerCallbackQuery();
        await bot.api.editMessageText(lastSummaryMessage.chat_id, lastSummaryMessage.message_id, details, {
            parse_mode: 'Markdown',
            reply_markup: { inline_keyboard: [[{ text: 'üîº –°–∫—Ä—ã—Ç—å', callback_data: 'hide_details' }]] },
        });
    }

    if (action === 'hide_details') {
        await ctx.answerCallbackQuery();
        await bot.api.editMessageText(lastSummaryMessage.chat_id, lastSummaryMessage.message_id, lastSummaryText, {
            parse_mode: 'Markdown',
            reply_markup: { inline_keyboard: [[{ text: 'üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ', callback_data: 'show_details' }]] },
        });
    }
});

cron.schedule('* * * * *', () => processTeamsMessages());
cron.schedule('0 * * * *', () => sendErrorSummaryIfNeeded());
cron.schedule('5 0 * * *', () => resetProcessedErrorSubjects(), { timezone: 'Europe/Moscow' });

bot.command('start', (ctx) => ctx.reply('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π Teams –≤–∫–ª—é—á–µ–Ω–∞.'));
bot.catch((err) => console.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', err));
bot.start();