require('dotenv').config();
const { Bot } = require('grammy');
const axios = require('axios');
const https = require('https');
const { ConfidentialClientApplication } = require('@azure/msal-node');
const cron = require('node-cron');
const fs = require('fs');
const path = require('path');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Bot(process.env.BOT_API_KEY);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ OAuth2 –¥–ª—è Microsoft Graph
const msalConfig = {
    auth: {
        clientId: process.env.AZURE_CLIENT_ID,
        authority: `https://login.microsoftonline.com/${process.env.AZURE_TENANT_ID}`,
        clientSecret: process.env.AZURE_CLIENT_SECRET,
    },
};

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
let lastProcessedMessageId = null;       // –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è
const collectedErrors = [];                // –°–±–æ—Ä –æ—à–∏–±–æ–∫ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π —Å–≤–æ–¥–∫–∏
const processedErrorSubjects = new Set();  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–º –æ—à–∏–±–æ–∫ (—á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)

// –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
const lastMessageIdFile = path.join(__dirname, 'lastMessageId.txt');
const processedSubjectsFile = path.join(__dirname, 'processedErrorSubjects.json');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è lastProcessedMessageId
async function saveLastProcessedMessageId(id) {
    try {
        await fs.promises.writeFile(lastMessageIdFile, id, 'utf8');
        console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π ID —Å–æ–æ–±—â–µ–Ω–∏—è: ${id}`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ lastMessageId.txt:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ lastProcessedMessageId –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
function loadLastProcessedMessageId() {
    try {
        if (fs.existsSync(lastMessageIdFile)) {
            const data = fs.readFileSync(lastMessageIdFile, 'utf8').trim();
            if (data) {
                lastProcessedMessageId = data;
                console.log(`üì• –ó–∞–≥—Ä—É–∂–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π ID —Å–æ–æ–±—â–µ–Ω–∏—è: ${lastProcessedMessageId}`);
            } else {
                console.log('‚ÑπÔ∏è lastMessageId.txt –ø—É—Å—Ç. –ù–∞—á–∏–Ω–∞–µ–º —Å –Ω—É–ª—è.');
            }
        } else {
            console.log('‚ÑπÔ∏è –§–∞–π–ª lastMessageId.txt –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º —Å –Ω—É–ª—è.');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ lastMessageId.txt:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ processedErrorSubjects –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
function loadProcessedErrorSubjects() {
    try {
        if (fs.existsSync(processedSubjectsFile)) {
            const data = fs.readFileSync(processedSubjectsFile, 'utf8').trim();
            if (data) {
                const subjects = JSON.parse(data);
                if (Array.isArray(subjects)) {
                    subjects.forEach(subject => processedErrorSubjects.add(subject));
                    console.log(`üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${processedErrorSubjects.size} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç–µ–º –æ—à–∏–±–æ–∫.`);
                } else {
                    console.warn('‚ö†Ô∏è processedErrorSubjects.json –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Å—Å–∏–≤–∞. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º –Ω–∞–±–æ—Ä–æ–º.');
                }
            } else {
                console.log('‚ÑπÔ∏è processedErrorSubjects.json –ø—É—Å—Ç. –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ –Ω–∞–±–æ—Ä–∞.');
            }
        } else {
            console.log('‚ÑπÔ∏è –§–∞–π–ª processedErrorSubjects.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ –Ω–∞–±–æ—Ä–∞.');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ processedErrorSubjects.json:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è processedErrorSubjects –≤ JSON-—Ñ–∞–π–ª
async function saveProcessedErrorSubjects() {
    try {
        const subjectsArray = Array.from(processedErrorSubjects);
        await fs.promises.writeFile(processedSubjectsFile, JSON.stringify(subjectsArray, null, 2), 'utf8');
        console.log('‚úÖ processedErrorSubjects —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ processedErrorSubjects.json:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ processedErrorSubjects (—Å–±—Ä–æ—Å) —á–µ—Ä–µ–∑ cron
async function resetProcessedErrorSubjects() {
    try {
        if (fs.existsSync(processedSubjectsFile)) {
            await fs.promises.unlink(processedSubjectsFile);
            console.log('üßπ processedErrorSubjects.json —É–¥–∞–ª–µ–Ω.');
        }
        processedErrorSubjects.clear();
        console.log('‚úÖ –°—á—ë—Ç—á–∏–∫ —Ç–µ–º –æ—à–∏–±–æ–∫ —Å–±—Ä–æ—à–µ–Ω.');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ processedErrorSubjects:', error);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
loadLastProcessedMessageId();
loadProcessedErrorSubjects();

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ Microsoft Graph
 */
async function getMicrosoftToken() {
    const cca = new ConfidentialClientApplication(msalConfig);
    const tokenRequest = {
        scopes: ['https://graph.microsoft.com/.default'],
    };

    try {
        const response = await cca.acquireTokenByClientCredential(tokenRequest);
        console.log('üîë Microsoft OAuth2 —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω.');
        return response.accessToken;
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ Microsoft:', err.message);
        return null;
    }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
 * –°—á–∏—Ç–∞–µ–º, —á—Ç–æ Teams –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 1 —Å–æ–æ–±—â–µ–Ω–∏–µ = 1 ID.
 */
function extractTextContent(message) {
    // –£–±–∏—Ä–∞–µ–º HTML-—Ç–µ–≥–∏
    const rawText = message.body?.content || '';
    const text = rawText.replace(/<\/?[^>]+(>|$)/g, '').trim();

    let sender = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    let subject = '–ë–µ–∑ —Ç–µ–º—ã';
    let isReply = false;

    // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:" –∏–ª–∏ "–¢–µ–º–∞:"
    const lines = text.split('\n').map(line => line.trim());
    let body = '';

    for (const line of lines) {
        if (line.startsWith('–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:')) {
            sender = line.replace(/^–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:\s*/i, '').trim();
        } else if (line.startsWith('–¢–µ–º–∞:')) {
            subject = line.replace(/^–¢–µ–º–∞:\s*/i, '').trim();
            // –ï—Å–ª–∏ —Ç–µ–º–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "RE:" –∏–ª–∏ "Re:", –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–≤–µ—Ç
            if (/^RE:/i.test(subject)) {
                isReply = true;
                // –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ç–µ–º—É –±–µ–∑ "RE:" –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏
                subject = subject.replace(/^RE:\s*/i, '').trim();
            }
        } else {
            body += (body ? '\n' : '') + line;
        }
    }

    // –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è "–æ—à–∏–±–∫–∏"
    const errorKeywords = /–æ—à–∏–±–∫–∞|–æ–ø–æ–≤–µ—â–µ–Ω–∏–µ|failed|error|–æ—à–∏–±–∫–∏|exception|critical/i;
    const isError =
        sender.toLowerCase() === 'noreply@winline.kz' &&
        (errorKeywords.test(subject) || errorKeywords.test(body));

    return {
        id: message.id,
        sender,
        subject,
        body,
        isReply, // –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º
        isError,
        createdDateTime: message.createdDateTime,
    };
}

/**
 * –ß—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ Microsoft Teams.
 */
async function fetchTeamsMessages(token, teamId, channelId) {
    const url = `https://graph.microsoft.com/v1.0/teams/${teamId}/channels/${channelId}/messages`;

    try {
        const response = await axios.get(url, {
            headers: {
                Authorization: `Bearer ${token}`,
            },
        });

        console.log(`üì• –ù–∞–π–¥–µ–Ω–æ ${response.data.value.length} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ.`);

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É—è extractTextContent
        const parsed = response.data.value.map((msg) => extractTextContent(msg));
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        return parsed.sort((a, b) => new Date(a.createdDateTime) - new Date(b.createdDateTime));
    } catch (err) {
        if (err.response) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Teams: ${err.response.status} - ${err.response.statusText}`);
            console.error(`üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: ${JSON.stringify(err.response.data)}`);
        } else {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Teams: ${err.message}`);
        }
        return [];
    }
}

/**
 * –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ OpenAI.
 * –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å "gpt-4o-mini" –∏ –∫–ª—é—á OPENAI_API_KEY.
 */
async function summarizeMessages(messages, lastMsgId) {
    try {
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º
        const messageList = messages.map((msg) => {
            const replyIndicator = msg.isReply ? '\n–¢–∏–ø: –û—Ç–≤–µ—Ç (—Ç–µ–º–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)' : '';
            return `ID: ${msg.id}\n–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ${msg.sender}\n–¢–µ–º–∞: ${msg.subject}${replyIndicator}\n–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: ${msg.body}`;
        }).join('\n\n');

        const prompt = `
(–ü–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π ID: ${lastMsgId})

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Teams. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É ID, —Å–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–æ–µ, —Ç–æ—á–Ω–æ–µ –∏ –ø–æ–Ω—è—Ç–Ω–æ–µ —Ä–µ–∑—é–º–µ, —Å—Ç—Ä–æ–≥–æ –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ. –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º (–¢–∏–ø: –û—Ç–≤–µ—Ç), –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏, —á—Ç–æ –æ–Ω–æ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º –∏ —á—Ç–æ —Ç–µ–º–∞ –±–µ—Ä—ë—Ç—Å—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.

–ü—Ä–∞–≤–∏–ª–∞:
1. ID —Å–æ–æ–±—â–µ–Ω–∏—è: –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä.
2. –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: —É–∫–∞–∂–∏ email –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è; –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ, –¥–æ–±–∞–≤—å –§–ò–û, –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ (–Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–¥–ø–∏—Å–∏ –∏–ª–∏ –¥–æ–º–µ–Ω–∞ –ø–æ—á—Ç—ã).
3. –¢–µ–º–∞: –µ—Å–ª–∏ —Ç–µ–º–∞ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–∞ –∏–ª–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, —É–∫–∞–∂–∏ –µ—ë. –î–ª—è –æ—Ç–≤–µ—Ç–æ–≤ —É–∫–∞–∂–∏, —á—Ç–æ —Ç–µ–º–∞ –±–µ—Ä—ë—Ç—Å—è –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
4. –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: —Å–æ—Å—Ç–∞–≤—å –æ–¥–Ω–æ-–¥–≤–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Ç–æ—á–Ω–æ –ø–µ—Ä–µ–¥–∞—é—â–∏—Ö —Å—É—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è—è –≤—Å–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏ –∏ –≤–æ–ø—Ä–æ—Å—ã. –ù–µ –ø–µ—Ä–µ—Å–∫–∞–∑—ã–≤–∞–π —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å–∏–ª—å–Ω–æ.
5. –ò–≥–Ω–æ—Ä–∏—Ä—É–π —ç–ª–µ–º–µ–Ω—Ç—ã, –Ω–µ –≤–ª–∏—è—é—â–∏–µ –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å—É—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∏, —Å—Å—ã–ª–∫–∏ –∏ –Ω–µ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Ñ—Ä–∞–∑—ã).

–°–æ—Å—Ç–∞–≤—å —Ä–µ–∑—é–º–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:

${messageList}
        `.trim();

        const requestData = {
            model: 'gpt-4o-mini',
            temperature: 0.0,
            max_tokens: 1000,
            messages: [
                {
                    role: 'user',
                    content: prompt,
                },
            ],
        };

        const response = await axios.post(
            'https://api.openai.com/v1/chat/completions',
            requestData,
            {
                headers: {
                    'Content-Type': 'application/json',
                    Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
                },
                httpsAgent: new https.Agent({ rejectUnauthorized: false }),
            }
        );

        console.log('üìù –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
        return response.data.choices[0]?.message?.content || '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI.';
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', err.message);
        return '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—é–º–µ —Å–æ–æ–±—â–µ–Ω–∏–π.';
    }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–¥–∫–∏ –æ—à–∏–±–æ–∫ —Ä–∞–∑ –≤ —á–∞—Å.
 */
async function sendErrorSummaryIfNeeded() {
    if (collectedErrors.length === 0) {
        console.log('üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –æ—à–∏–±–æ–∫ –¥–ª—è —Å–≤–æ–¥–∫–∏.');
        return;
    }

    const errorCountBySubject = {};

    collectedErrors.forEach(error => {
        if (errorCountBySubject[error.subject]) {
            errorCountBySubject[error.subject].count += 1;
            errorCountBySubject[error.subject].lastOccurred = error.createdDateTime;
        } else {
            errorCountBySubject[error.subject] = {
                count: 1,
                lastOccurred: error.createdDateTime,
                body: error.body,
            };
        }
    });

    let summary = 'üîç *–°–≤–æ–¥–∫–∞ –æ—à–∏–±–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å:*\n\n';
    for (const [subject, data] of Object.entries(errorCountBySubject)) {
        const lastDate = new Date(data.lastOccurred).toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' });
        summary += `üìå *–¢–µ–º–∞:* ${subject}\n- *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* ${data.count}\n- *–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ:* ${lastDate}\n\n`;
    }

    try {
        await bot.api.sendMessage(process.env.TELEGRAM_CHAT_ID, summary, { parse_mode: 'Markdown' });
        console.log('üì§ –°–≤–æ–¥–∫–∞ –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram.');
        collectedErrors.length = 0;
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–≤–æ–¥–∫–∏ –æ—à–∏–±–æ–∫ –≤ Telegram:', err.message);
    }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Teams.
 */
async function processTeamsMessages() {
    const msToken = await getMicrosoftToken();
    if (!msToken) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω Microsoft.');
        return;
    }

    const teamId = process.env.TEAM_ID;
    const channelId = process.env.CHANNEL_ID;

    const messages = await fetchTeamsMessages(msToken, teamId, channelId);
    if (messages.length === 0) {
        console.log('üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.');
        return;
    }

    const newMessages = messages.filter(msg => {
        if (!lastProcessedMessageId) return true;
        return msg.id > lastProcessedMessageId;
    });

    if (newMessages.length === 0) {
        console.log('üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.');
        return;
    }

    lastProcessedMessageId = newMessages[newMessages.length - 1].id;
    await saveLastProcessedMessageId(lastProcessedMessageId);

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—à–∏–±–æ–∫ –∏ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    const errors = newMessages.filter(msg => msg.isError);
    const normalMessages = newMessages.filter(msg => !msg.isError);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    if (errors.length > 0) {
        for (const errorMsg of errors) {
            const errorSubject = errorMsg.subject;
            if (!processedErrorSubjects.has(errorSubject)) {
                const errorMessage = `‚ùó *–ù–æ–≤–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞:*\n\nüìå *–¢–µ–º–∞:* ${errorMsg.subject}`;
                try {
                    await bot.api.sendMessage(process.env.TELEGRAM_CHAT_ID, errorMessage, { parse_mode: 'Markdown' });
                    console.log('üì§ –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram.');
                    processedErrorSubjects.add(errorSubject);
                    await saveProcessedErrorSubjects();
                } catch (err) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤ Telegram:', err.message);
                }
            } else {
                collectedErrors.push(errorMsg);
                console.log(`üì• –û—à–∏–±–∫–∞ —Å —Ç–µ–º–æ–π "${errorSubject}" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–≤–æ–¥–∫—É.`);
            }
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è)
    if (normalMessages.length > 0) {
        const summary = await summarizeMessages(normalMessages, lastProcessedMessageId);
        if (summary) {
            await bot.api.sendMessage(
                process.env.TELEGRAM_CHAT_ID,
                `üìù *–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:*\n\n${summary}`,
                { parse_mode: 'Markdown' }
            );
            console.log('üì§ –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram.');
        }
    }
}

// –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ cron –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
cron.schedule('* * * * *', () => {
    console.log('üîÑ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π Teams...');
    processTeamsMessages();
});

// –ó–∞–¥–∞—á–∞ cron –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏ –æ—à–∏–±–æ–∫ —Ä–∞–∑ –≤ —á–∞—Å
cron.schedule('0 * * * *', async () => {
    console.log('üïí –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏ –æ—à–∏–±–æ–∫...');
    await sendErrorSummaryIfNeeded();
});

// –ó–∞–¥–∞—á–∞ cron –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—á—ë—Ç—á–∏–∫–∞ —Ç–µ–º –æ—à–∏–±–æ–∫ –≤ 00:05 –ø–æ –ú–æ—Å–∫–≤–µ
cron.schedule('5 0 * * *', async () => {
    console.log('üßπ –ó–∞–ø—É—Å–∫ —Å–±—Ä–æ—Å–∞ processedErrorSubjects...');
    await resetProcessedErrorSubjects();
}, {
    timezone: "Europe/Moscow"
});

// –ö–æ–º–∞–Ω–¥–∞ /start –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
bot.command('start', (ctx) => {
    ctx.reply('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π Teams –≤–∫–ª—é—á–µ–Ω–∞.');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
bot.catch((err) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞:', err);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.start();
