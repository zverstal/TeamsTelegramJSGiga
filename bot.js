require('dotenv').config();
const { Bot } = require('grammy');
const axios = require('axios');
const https = require('https');
const { ConfidentialClientApplication } = require('@azure/msal-node');
const cron = require('node-cron');
const fs = require('fs');
const path = require('path');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Bot(process.env.BOT_API_KEY);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ OAuth2 –¥–ª—è Microsoft Graph
const msalConfig = {
    auth: {
        clientId: process.env.AZURE_CLIENT_ID,
        authority: `https://login.microsoftonline.com/${process.env.AZURE_TENANT_ID}`,
        clientSecret: process.env.AZURE_CLIENT_SECRET,
    },
};

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
let lastProcessedMessageId = null;       // –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π ID —Å–æ–æ–±—â–µ–Ω–∏—è
const collectedErrors = [];             // –°–±–æ—Ä –æ—à–∏–±–æ–∫ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π —Å–≤–æ–¥–∫–∏
const processedErrorSubjects = new Set(); // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–º –æ—à–∏–±–æ–∫ (—á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)

// –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
const lastMessageIdFile = path.join(__dirname, 'lastMessageId.txt');
const processedSubjectsFile = path.join(__dirname, 'processedErrorSubjects.json');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è lastProcessedMessageId
async function saveLastProcessedMessageId(id) {
    try {
        await fs.promises.writeFile(lastMessageIdFile, id, 'utf8');
        console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π ID —Å–æ–æ–±—â–µ–Ω–∏—è: ${id}`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ lastMessageId.txt:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ lastProcessedMessageId –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
function loadLastProcessedMessageId() {
    try {
        if (fs.existsSync(lastMessageIdFile)) {
            const data = fs.readFileSync(lastMessageIdFile, 'utf8').trim();
            if (data) {
                lastProcessedMessageId = data;
                console.log(`üì• –ó–∞–≥—Ä—É–∂–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π ID —Å–æ–æ–±—â–µ–Ω–∏—è: ${lastProcessedMessageId}`);
            } else {
                console.log('‚ÑπÔ∏è lastMessageId.txt –ø—É—Å—Ç. –ù–∞—á–∏–Ω–∞–µ–º —Å –Ω—É–ª—è.');
            }
        } else {
            console.log('‚ÑπÔ∏è –§–∞–π–ª lastMessageId.txt –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º —Å –Ω—É–ª—è.');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ lastMessageId.txt:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ processedErrorSubjects –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
function loadProcessedErrorSubjects() {
    try {
        if (fs.existsSync(processedSubjectsFile)) {
            const data = fs.readFileSync(processedSubjectsFile, 'utf8').trim();
            if (data) {
                const subjects = JSON.parse(data);
                if (Array.isArray(subjects)) {
                    subjects.forEach(subject => processedErrorSubjects.add(subject));
                    console.log(`üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${processedErrorSubjects.size} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç–µ–º –æ—à–∏–±–æ–∫.`);
                } else {
                    console.warn('‚ö†Ô∏è processedErrorSubjects.json –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Å—Å–∏–≤–∞. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º –Ω–∞–±–æ—Ä–æ–º.');
                }
            } else {
                console.log('‚ÑπÔ∏è processedErrorSubjects.json –ø—É—Å—Ç. –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ –Ω–∞–±–æ—Ä–∞.');
            }
        } else {
            console.log('‚ÑπÔ∏è –§–∞–π–ª processedErrorSubjects.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ –Ω–∞–±–æ—Ä–∞.');
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ processedErrorSubjects.json:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è processedErrorSubjects –≤ JSON-—Ñ–∞–π–ª
async function saveProcessedErrorSubjects() {
    try {
        const subjectsArray = Array.from(processedErrorSubjects);
        await fs.promises.writeFile(processedSubjectsFile, JSON.stringify(subjectsArray, null, 2), 'utf8');
        console.log('‚úÖ processedErrorSubjects —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ processedErrorSubjects.json:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ processedErrorSubjects (—Å–±—Ä–æ—Å) —á–µ—Ä–µ–∑ cron
async function resetProcessedErrorSubjects() {
    try {
        if (fs.existsSync(processedSubjectsFile)) {
            await fs.promises.unlink(processedSubjectsFile);
            console.log('üßπ processedErrorSubjects.json —É–¥–∞–ª–µ–Ω.');
        }
        processedErrorSubjects.clear();
        console.log('‚úÖ –°—á—ë—Ç—á–∏–∫ —Ç–µ–º –æ—à–∏–±–æ–∫ —Å–±—Ä–æ—à–µ–Ω.');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ processedErrorSubjects:', error);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
loadLastProcessedMessageId();
loadProcessedErrorSubjects();

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ Microsoft Graph
 */
async function getMicrosoftToken() {
    const cca = new ConfidentialClientApplication(msalConfig);

    const tokenRequest = {
        scopes: ['https://graph.microsoft.com/.default'],
    };

    try {
        const response = await cca.acquireTokenByClientCredential(tokenRequest);
        console.log('üîë Microsoft OAuth2 —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω.');
        return response.accessToken;
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ Microsoft:', err.message);
        return null;
    }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ GigaChat (–¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏)
 */
async function getGigaChatToken() {
    const data = new URLSearchParams({ 'scope': 'GIGACHAT_API_PERS' });
    const config = {
        method: 'post',
        url: 'https://ngw.devices.sberbank.ru:9443/api/v2/oauth',
        headers: {
            'RqUID': '6f0b1291-c7f3-43c6-bb2e-9f3efb2dc98e',
            'Content-Type': 'application/x-www-form-urlencoded',
            'Authorization': `Bearer ${process.env.GIGACHAT_API_KEY}`,
        },
        data: data,
        httpsAgent: new https.Agent({ rejectUnauthorized: false }),
    };

    try {
        const response = await axios.request(config);
        console.log('üîë GigaChat —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω.');
        return response.data.access_token;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è GigaChat —Ç–æ–∫–µ–Ω–∞:', error.message);
        return null;
    }
}

/**
 * –ü—Ä–∏–º–µ—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ‚Äî ¬´—Å–∫–ª–µ–π–∫–∞¬ª —Å–æ–æ–±—â–µ–Ω–∏–π, 
 * –µ—Å–ª–∏ —É –≤–∞—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –±—ã–≤–∞—é—Ç —Å–∏—Ç—É–∞—Ü–∏–∏, 
 * –∫–æ–≥–¥–∞ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Teams –ø—Ä–∏—Ö–æ–¥–∏—Ç –ø–æ–¥ —Ä–∞–∑–Ω—ã–º–∏ ID.
 * –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ.
 */
// function unifyMessages(messages, timeWindowMinutes = 3) {
//     const unified = [];
//     let current = null;

//     // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
//     const sorted = [...messages].sort((a, b) => new Date(a.createdDateTime) - new Date(b.createdDateTime));

//     for (const msg of sorted) {
//         if (current) {
//             const sameSender = (current.sender === msg.sender);
//             const sameSubject = (current.subject === msg.subject);
//             const timeDiff = Math.abs(new Date(msg.createdDateTime) - new Date(current.createdDateTime));
//             const withinTimeWindow = timeDiff < timeWindowMinutes * 60_000;

//             if (sameSender && sameSubject && withinTimeWindow) {
//                 current.body += `\n\n---\n\n${msg.body}`;
//                 console.log(`üîó –°–∫–ª–µ–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ ID=${msg.id} c ID=${current.id}`);
//             } else {
//                 unified.push(current);
//                 current = { ...msg };
//             }
//         } else {
//             current = { ...msg };
//         }
//     }
//     if (current) unified.push(current);
//     return unified;
// }

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. 
 * –°—á–∏—Ç–∞–µ–º, —á—Ç–æ Teams —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 1 —Å–æ–æ–±—â–µ–Ω–∏–µ = 1 ID.
 */
function extractTextContent(message) {
    // –£–±–∏—Ä–∞–µ–º HTML-—Ç–µ–≥–∏
    const rawText = message.body?.content || '';
    const text = rawText.replace(/<\/?[^>]+(>|$)/g, '').trim();

    let sender = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    let subject = '–ë–µ–∑ —Ç–µ–º—ã';

    // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏, —á—Ç–æ–±—ã –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –Ω–∞–π—Ç–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:" / "–¢–µ–º–∞:"
    const lines = text.split('\n').map(line => line.trim());
    let body = '';

    for (const line of lines) {
        if (line.startsWith('–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:')) {
            sender = line.replace(/^–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:\s*/i, '').trim();
        } else if (line.startsWith('–¢–µ–º–∞:')) {
            subject = line.replace(/^–¢–µ–º–∞:\s*/i, '').trim();
        } else {
            body += (body ? '\n' : '') + line;
        }
    }

    // –ï—Å–ª–∏ –∂–µ –≤ Teams API –µ—Å—Ç—å message.from / message.subject, –º–æ–∂–Ω–æ –±—Ä–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é:
    // sender = message.from?.emailAddress?.address || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    // subject = message.subject || '–ë–µ–∑ —Ç–µ–º—ã';

    // –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è ¬´–æ—à–∏–±–∫–∏¬ª
    const errorKeywords = /–æ—à–∏–±–∫–∞|–æ–ø–æ–≤–µ—â–µ–Ω–∏–µ|failed|error|–æ—à–∏–±–∫–∏|exception|critical/i;
    const isError =
        sender.toLowerCase() === 'noreply@winline.kz' &&
        (errorKeywords.test(subject) || errorKeywords.test(body));

    return {
        id: message.id,
        sender,
        subject,
        body,
        isError,
        createdDateTime: message.createdDateTime,
    };
}

/**
 * –ß—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ Microsoft Teams.
 */
async function fetchTeamsMessages(token, teamId, channelId) {
    const url = `https://graph.microsoft.com/v1.0/teams/${teamId}/channels/${channelId}/messages`;

    try {
        const response = await axios.get(url, {
            headers: {
                Authorization: `Bearer ${token}`,
            },
        });

        console.log(`üì• –ù–∞–π–¥–µ–Ω–æ ${response.data.value.length} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ.`);

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É—è extractTextContent
        const parsed = response.data.value.map((msg) => extractTextContent(msg));
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        return parsed.sort((a, b) => new Date(a.createdDateTime) - new Date(b.createdDateTime));
    } catch (err) {
        if (err.response) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Teams: ${err.response.status} - ${err.response.statusText}`);
            console.error(`üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: ${JSON.stringify(err.response.data)}`);
        } else {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Teams: ${err.message}`);
        }
        return [];
    }
}

/**
 * –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ GigaChat.
 * –ü–µ—Ä–µ–¥–∞—ë–º –≤ –ø—Ä–æ–º—Ç ID –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–∏ –¥–æ–±–∞–≤–ª—è–µ–º lastProcessedMessageId).
 */
async function summarizeMessages(messages, token, lastMsgId) {
    try {
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–∞–º–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        const messageList = messages.map((msg) => {
            return `ID: ${msg.id}\n–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ${msg.sender}\n–¢–µ–º–∞: ${msg.subject}\n–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: ${msg.body}`;
        }).join('\n\n');

        const improvedPrompt = `
        (–ü–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π ID: ${lastMsgId})
        
        –ü—Ä–∏–≤–µ—Ç! –ü–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã–µ –Ω–∏–∂–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Teams. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ –ø–æ –µ–≥–æ ID, —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∫—Ä–∞—Ç–∫–æ–µ, –ø–æ–Ω—è—Ç–Ω–æ–µ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ —Ä–µ–∑—é–º–µ, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–∏ —ç—Ç–æ–º –≤—Å–µ –≤–∞–∂–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏.
        
        –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —É–∫–∞–∂–∏:
        1. –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–º—è, –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏ –∫–æ–º–ø–∞–Ω–∏—é, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ –ø–æ–¥–ø–∏—Å–∏ –∏–ª–∏ email). –ï—Å–ª–∏ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –Ω–µ—Ç ‚Äî —É–∫–∞–∂–∏ email.
        2. –¢–µ–º–∞: –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π —Ç–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏.
        3. –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: –æ–ø–∏—à–∏ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–∏—Å—å–º–∞ –≤ –æ–¥–Ω–æ–º-–¥–≤—É—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö, –æ—Ç–º–µ—Ç–∏–≤ –≤–∞–∂–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ ID, –≤—Ä–µ–º—è –∏–ª–∏ –∫–æ–¥—ã –æ—à–∏–±–æ–∫. –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º (—Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º "RE"), —É–ø–æ–º—è–Ω–∏, —á—Ç–æ –æ–Ω–æ —Å–≤—è–∑–∞–Ω–æ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
        
        –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ—Å—Ç–∞–≤—å —Ä–µ–∑—é–º–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω–æ, –Ω–µ –æ–±—ä–µ–¥–∏–Ω—è—è –∏—Ö, –∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–π –≤–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –≤–Ω–µ—à–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ.
        
        –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:
        - [ID: 12345]
          –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ (i.ivanov@company.com), DevOps Engineer, CompanyName.
          –¢–µ–º–∞: –ü—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –¥–µ–ø–ª–æ–µ
          –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –≤–æ–∑–Ω–∏–∫—à—É—é –æ—à–∏–±–∫—É –≤–æ –≤—Ä–µ–º—è –¥–µ–ø–ª–æ—è, —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–¥–∞ –æ—à–∏–±–∫–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è. –Ø–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        
        –°–æ—Å—Ç–∞–≤—å —Ä–µ–∑—é–º–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:
        
        ${messageList}
        `.trim();
        

        const requestData = {
            model: 'GigaChat:latest',
            temperature: 0.80,
            n: 1,
            max_tokens: 1000,
            repetition_penalty: 1.07,
            stream: false,
            messages: [
                {
                    role: 'user',
                    content: improvedPrompt,
                },
            ],
        };

        const response = await axios.post(
            'https://gigachat.devices.sberbank.ru/api/v1/chat/completions',
            requestData,
            {
                headers: {
                    'Content-Type': 'application/json',
                    Authorization: `Bearer ${token}`,
                },
                httpsAgent: new https.Agent({ rejectUnauthorized: false }),
            }
        );

        console.log('üìù –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
        return response.data.choices[0]?.message?.content || '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç GigaChat.';
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', err.message);
        return '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—é–º–µ —Å–æ–æ–±—â–µ–Ω–∏–π.';
    }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–¥–∫–∏ –æ—à–∏–±–æ–∫ —Ä–∞–∑ –≤ —á–∞—Å (–∏–ª–∏ –ø—Ä–∏ –Ω—É–∂–Ω–æ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ).
 */
async function sendErrorSummaryIfNeeded() {
    if (collectedErrors.length === 0) {
        console.log('üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –æ—à–∏–±–æ–∫ –¥–ª—è —Å–≤–æ–¥–∫–∏.');
        return; // –ù–µ—Ç –Ω–æ–≤—ã—Ö –æ—à–∏–±–æ–∫ –¥–ª—è —Å–≤–æ–¥–∫–∏
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
    const errorCountBySubject = {};

    collectedErrors.forEach(error => {
        if (errorCountBySubject[error.subject]) {
            errorCountBySubject[error.subject].count += 1;
            errorCountBySubject[error.subject].lastOccurred = error.createdDateTime;
        } else {
            errorCountBySubject[error.subject] = {
                count: 1,
                lastOccurred: error.createdDateTime,
                body: error.body,
            };
        }
    });

    let summary = 'üîç *–°–≤–æ–¥–∫–∞ –æ—à–∏–±–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å:*\n\n';
    for (const [subject, data] of Object.entries(errorCountBySubject)) {
        const lastDate = new Date(data.lastOccurred).toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' });
        summary += `üìå *–¢–µ–º–∞:* ${subject}\n- *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* ${data.count}\n- *–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ:* ${lastDate}\n\n`;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É
    try {
        await bot.api.sendMessage(process.env.TELEGRAM_CHAT_ID, summary, { parse_mode: 'Markdown' });
        console.log('üì§ –°–≤–æ–¥–∫–∞ –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram.');
        collectedErrors.length = 0; // –û—á–∏—Å—Ç–∏—Ç—å —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–≤–æ–¥–∫–∏ –æ—à–∏–±–æ–∫ –≤ Telegram:', err.message);
    }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Teams.
 */
async function processTeamsMessages() {
    const msToken = await getMicrosoftToken();
    if (!msToken) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω Microsoft.');
        return;
    }

    const gigachatToken = await getGigaChatToken();
    if (!gigachatToken) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω GigaChat.');
        // –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–µ–∑ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
    }

    const teamId = process.env.TEAM_ID;
    const channelId = process.env.CHANNEL_ID;

    const messages = await fetchTeamsMessages(msToken, teamId, channelId);
    if (messages.length === 0) {
        console.log('üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.');
        return;
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ ID
    const newMessages = messages.filter(msg => {
        if (!lastProcessedMessageId) return true;
        return msg.id > lastProcessedMessageId;
    });

    if (newMessages.length === 0) {
        console.log('üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.');
        return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º lastProcessedMessageId
    lastProcessedMessageId = newMessages[newMessages.length - 1].id;
    await saveLastProcessedMessageId(lastProcessedMessageId);

    // (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) "–°–∫–ª–µ–∏–≤–∞–µ–º" —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ:
    // const unifiedMessages = unifyMessages(newMessages); 
    // const errors = unifiedMessages.filter(msg => msg.isError);
    // const normalMessages = unifiedMessages.filter(msg => !msg.isError);

    // –ë–µ–∑ —Å–∫–ª–µ–π–∫–∏:
    const errors = newMessages.filter(msg => msg.isError);
    const normalMessages = newMessages.filter(msg => !msg.isError);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    if (errors.length > 0) {
        for (const errorMsg of errors) {
            const errorSubject = errorMsg.subject;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç—É —Ç–µ–º—É
            if (!processedErrorSubjects.has(errorSubject)) {
                const errorMessage = `‚ùó *–ù–æ–≤–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞:*\n\nüìå *–¢–µ–º–∞:* ${errorMsg.subject}`;
                try {
                    await bot.api.sendMessage(process.env.TELEGRAM_CHAT_ID, errorMessage, { parse_mode: 'Markdown' });
                    console.log('üì§ –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram.');

                    processedErrorSubjects.add(errorSubject);
                    await saveProcessedErrorSubjects();
                } catch (err) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤ Telegram:', err.message);
                }
            } else {
                // –ï—Å–ª–∏ —Ç–µ–º–∞ —É–∂–µ –≤—Å—Ç—Ä–µ—á–∞–ª–∞—Å—å, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë –≤ —Å–≤–æ–¥–∫—É
                collectedErrors.push(errorMsg);
                console.log(`üì• –û—à–∏–±–∫–∞ —Å —Ç–µ–º–æ–π "${errorSubject}" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–≤–æ–¥–∫—É.`);
            }
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ "–Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö" —Å–æ–æ–±—â–µ–Ω–∏–π (—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è)
    if (normalMessages.length > 0 && gigachatToken) {
        const summary = await summarizeMessages(normalMessages, gigachatToken, lastProcessedMessageId);
        if (summary) {
            await bot.api.sendMessage(
                process.env.TELEGRAM_CHAT_ID,
                `üìù *–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:*\n\n${summary}`,
                { parse_mode: 'Markdown' }
            );
            console.log('üì§ –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram.');
        }
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É cron –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
cron.schedule('* * * * *', () => {
    console.log('üîÑ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π Teams...');
    processTeamsMessages();
});

// –ó–∞–¥–∞—á–∞ cron –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏ –æ—à–∏–±–æ–∫ —Ä–∞–∑ –≤ —á–∞—Å
cron.schedule('0 * * * *', async () => {
    console.log('üïí –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏ –æ—à–∏–±–æ–∫...');
    await sendErrorSummaryIfNeeded();
});

// –ó–∞–¥–∞—á–∞ cron –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—á—ë—Ç—á–∏–∫–∞ —Ç–µ–º –æ—à–∏–±–æ–∫ –≤ 00:05 –ø–æ –ú–æ—Å–∫–≤–µ
cron.schedule('5 0 * * *', async () => {
    console.log('üßπ –ó–∞–ø—É—Å–∫ —Å–±—Ä–æ—Å–∞ processedErrorSubjects...');
    await resetProcessedErrorSubjects();
}, {
    timezone: "Europe/Moscow"
});

// –ö–æ–º–∞–Ω–¥–∞ /start –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
bot.command('start', (ctx) => {
    ctx.reply('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π Teams –≤–∫–ª—é—á–µ–Ω–∞.');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
bot.catch((err) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞:', err);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.start();
